Containers and Network Requests:
If we create a container then maybe we want it to communicate outside, like we want it to communicate it with:
i. some-api.com on internet: We want to send request from our container to WWW. For practice I have created a container that have node app that sends api requests to swapi dummy api. And after running container I use postman to try and send request to our container and see either it can communicate with internet. So first we create our image then we run our container and then we send api request using postman to our running container and get data from it. The api GET request may look like this  localhost:3000/people.
ii. Our Host Machine: We want to send request from our container to our host machine. We can use host.docker.internal  to refer to the local address of our machine.
iii. To another container: We want it to send request to another container that is running  MongoDB. For practice we use same node app that have swapi and we run another container which runs mongo. Command for running mongodb container may look like this  docker run -d --name mongodb mongo. Here we directly run mongo image from dockerhub. After running our mongo container we can inspect it and find its ip using following command  docker container inspect mongodb. Then we copy its IP that mentioned under Network Settings section, and we put that IP in our node app's app.js file. And our code look like this    'mongodb://172.17.0.2:27017/swfavorites',
After that we can first send GET api request using postman to our node container to see movies and people. And we can also send request to our mongodb using favorites first we save our favorites data in mongo db we send POST request to it using http://localhost:3000/favorites with our data in json format. Then we send GET request to favorites and here we can see that data from mongodb.

Creating Container Networks:
Container networks in Docker allow containers to communicate with each other and the outside world. Docker uses networking to isolate containers and ensure secure, flexible communication between services. Within a Docker network, all containers can communicate with each other and IPs are automatically resolved. To assign a network to containers first we we create network, using this command  docker network create network-name. To assign network to container when we run container we add additional tag, like this  docker run -d --name mongodb --network favorites-net mongo. Now if we create other containers that have same network, then they all can communicate with each others. And we can also modify our node code to  'mongodb://container-name:27017/swfavorites', and the docker will automatically assign IP address of other container in code of our node app. Then we build our image again and run our node container with same network as mongodb using command  docker run -d --name favorites --network favorites-net --rm -p 3000:3000 favorites-node. 
Note: Docker will NOT replace our source code either while we host.docker.internal or while we use container name instead of its IP in our code. Simply what docker do is whenever request is made from inside of container to outside either locally or cross containers on same networks docker resolves IP of local machine or other container within URL. 




